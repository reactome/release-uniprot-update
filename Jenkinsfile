// This Jenkinsfile is used by Jenkins to run the 'UniProt Update' step of Reactome's release.
// This step synchronizes Reactome's database with UniProt.

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline {
	agent any

	environment {
		ECR_URL = 'public.ecr.aws/reactome/release-uniprot-update'
		CONT_NAME = 'uniprot_container'
		CONT_ROOT = '/opt/release-uniprot-update'
	}
	
	stages {
		// This stage checks that an upstream step, ConfirmReleaseConfigs, was run successfully.
		stage('Check ConfirmReleaseConfigs build succeeded'){
			steps{
				script{
					utils.checkUpstreamBuildsSucceeded("ConfirmReleaseConfigs")
				}
			}
		}

		/*
		// This stage backs up the gk_central database before it is modified.
		stage('Setup: Back up gk_central before modifications'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						utils.takeDatabaseDumpAndGzip("${env.GK_CENTRAL_DB}", "uniprot_update", "before", "${env.CURATOR_SERVER}")
					}
				}
			}
		}
		*/
		// Make directories, and download uniprot_sprot.xml.gz from UniProt.
		stage('Setup: Make directories, and download uniprot_sprot.xml.gz'){
			steps{
				script{
					sh "mkdir -p update-dir logs"
					sh "wget -N -P update-dir ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.xml.gz"
				}
			}
		}
		// This stage makes the config/credentials file
		stage('Setup: Get config/credentials'){
			steps{
				script{
					withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')]){
						sh "mkdir -p config"
						sh "sudo cp $ConfigFile config/auth.properties"
						sh "sudo chown jenkins:jenkins config/ -R"                    
					}
				}
			}
		}
		// This stage pulls the docker image and removes old containers
		stage('Setup: Pull and clean docker environment'){
			steps{
				sh "docker pull ${ECR_URL}:latest"
				sh """
					if docker ps -a --format '{{.Names}}' | grep -Eq '${CONT_NAME}'; then
						docker rm -f ${CONT_NAME}
					fi
				"""
			}
		}

		// This stage executes the UniProt Update Java program.
		stage('Main: UniProt Update'){
			steps {
				// mount config, update-dir, and logs folder
				// run jar, tee stdout-->logs/out.log, and tee stderr-->logs/err.log 
				sh """\
					docker run -v \$(pwd)/config/:${CONT_ROOT}/config/ -v \$(pwd)/update-dir/:${CONT_ROOT}/update-dir/ -v \$(pwd)/logs/:${CONT_ROOT}/logs/ \\
						--net=host --name ${CONT_NAME} \\
						${ECR_URL}:latest \\
						/bin/bash -c '(java -Xmx${env.JAVA_MEM_MAX}m -jar target/uniprot*-jar-with-dependencies.jar config/auth.properties | tee logs/out.log) 3>&1 1>&2 2>&3 | tee logs/err.log'
				"""
				sh "rm -f update-dir/uniprot_sprot.xml.gz"
			}
		}

		// This stage backs up the gk_central database after modification.
		stage('Post: Backup gk_central after modifications'){
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
						utils.takeDatabaseDumpAndGzip("${env.GK_CENTRAL_DB}", "uniprot_update", "after", "${env.CURATOR_SERVER}")
					}
				}
			}
		}
		// This stage emails the uniprot.wiki file to the default recipients list.
		stage('Post: Email UniProt.wiki file'){
			steps{
				script{
					def uniprotWikiFile = "uniprot.wiki"

					def releaseVersion = utils.getReleaseVersion();
					def emailSubject = "UniProt Update Reports for v${releaseVersion}"
					def emailBody = "Hello,\n\nThis is an automated message from Jenkins regarding an update for v${releaseVersion}. The UniProt Update step has completed. Please review the ${uniprotWikiFile} file attached to this email. If it looks correct, the contents of the file need to be uploaded to https://devwiki.reactome.org/index.php/Reports_Archive under 'UniProt Update Reports'. Please add the current UniProt wiki URL to the 'Archived reports' section of the page. If the file looks incorrect, please email the developer running Release. \n\nThanks!"
					utils.sendEmailWithAttachment("$emailSubject", "$emailBody", "$uniprotWikiFile")
				}
			}
		}
		// All databases, logs, and data files generated by this step are compressed before moving them to the Reactome S3 bucket.
		stage('Post: Archive Outputs'){
			steps{
				script{
					def dataFiles = ["update-dir/*"]
					def logFiles = []
					def foldersToDelete = ["update-dir"]
					utils.cleanUpAndArchiveBuildFiles("uniprot_update", dataFiles, logFiles, foldersToDelete)                    
				}
			}
		}
	}
}
